
Interface Definition

    `Iterable` Interface 
        import java.util.Iterable

        public interface Iterable<Item> {
            Iterator<Item> iterator();          // -> returns Iterator
        }



    `Iterator` Interface
        import java.util.Iterator

        public interface Iterator<Item> {
            boolean hasNext();
            Item next();
            void remove();      // optional
        }


    `ListIterator`
            extention of `Iterator`. allows bidirection traversal 
        import java.util.ListIterator;
        
        ArrayList<String> list = new ArrayList<>();
        ListIterator<String> listIterator = list.listIterator();





Example
    // longhand
        Iterator<String> i = stack.iterator();
        while(i.hasNext()){
            String s= i.next();
            StdOut.println(s);
        }

    // foreach shorthand
        for (String s: stack) {
            StdOut.println(s);
        }

    Code:

        import java.util.Iterator;

        public class Stack<Item> implements Iterable<Item> {
            
            public Iterator<Item> iterator() {
                return new ListIterator();
            }
    ````        
            // inner class
            private class ListIterator implements Iterator<Item> {
                private Node current = first;
                public boolean hasNext() {
                    return current != null;
                }
                public Item next() {
                    if (current == null) throw NoSuchElementException
                    Item item = current.item;
                    current = current.next;
                    return item;
                }
                public void remove() { throw UnsupportedOperationException }
            }
        }

    CodeExample:

        public Iterator<Item> iterator() { return new ReverseArrayIterator();}
        // reverse because Stack pop's off the last element
        private class ReverseArrayIterator implements Iterator<Item> {
            private int i = N;
            public boolean hasNext() {return i > 0};
            public void remove() {}
            public Item next() { if (hasNext()) return s[--i] else throw NoSuchElementException}
        }

    Another Example:

        ArrayList<String> list = new ArrayList<>();
        Iterator<String> iterator = list.iterator();
        try {
            while (iterator.hasNext()) {
                String element = iterator.next();
                System.out.println(element);
                if (element.equals("B")) {
                    list.add("D");
                }
            } catch (CurrentModificationException e) {
                System.out.println();
            }
        }


